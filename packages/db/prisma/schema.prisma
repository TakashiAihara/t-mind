// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model MindMap {
    id    String @id @default(auto()) @map("_id") @db.ObjectId
    title String

    nodes Node[]

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId
}

model Node {
    id   String @id @default(cuid()) @map("_id")
    type String

    data     NodeData?
    position NodePosition?
    // style    NodeStyle?

    sourceEdge Edge[] @relation("source")
    targetEdge Edge[] @relation("target")

    mindMap   MindMap? @relation(fields: [mindMapId], references: [id], onDelete: Cascade)
    mindMapId String?  @db.ObjectId
}

model NodePosition {
    id String @id @default(cuid()) @map("_id")
    x  Int
    y  Int

    node   Node   @relation(fields: [nodeId], references: [id], onDelete: Cascade)
    nodeId String @unique
}

model NodeData {
    id    String @id @default(cuid()) @map("_id")
    label String

    node   Node   @relation(fields: [nodeId], references: [id], onDelete: Cascade)
    nodeId String @unique
}

// model NodeStyle {
//     id String @id @default(cuid()) @map("_id")
//     background String
//     color      String

//     node   Node   @relation(fields: [nodeId], references: [id], onDelete: Cascade)
//     nodeId String @unique
// }

model Edge {
    id    String @id @default(cuid()) @map("_id")
    label String
    // type  String
    // animated Boolean

    data  EdgeData?
    style EdgeStyle?

    sourceNode Node   @relation("source", fields: [source], references: [id], onDelete: Cascade)
    source     String
    targetNode Node   @relation("target", fields: [target], references: [id], onDelete: Cascade)
    target     String
}

model EdgeData {
    id    String @id @default(cuid()) @map("_id")
    label String

    node   Edge   @relation(fields: [nodeId], references: [id], onDelete: Cascade)
    nodeId String @unique
}

model EdgeStyle {
    id         String @id @default(cuid()) @map("_id")
    background String
    color      String

    node   Edge   @relation(fields: [nodeId], references: [id], onDelete: Cascade)
    nodeId String @unique
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver,
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    expires      DateTime

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts Account[]
    sessions Session[]

    mindMap MindMap[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

generator zod {
    provider         = "zod-prisma-types"
    output           = "../zod"
    createInputTypes = false
    useMultipleFiles = true
}
