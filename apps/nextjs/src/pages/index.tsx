import { useCallback, useRef, useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import { signIn, signOut } from "next-auth/react";
import ReactFlow, {
  Background,
  Controls,
  MiniMap,
  ReactFlowProvider,
  addEdge,
  useEdgesState,
  useNodesState,
  useReactFlow,
  type Connection,
  type Edge,
} from "reactflow";

import { api, type RouterOutputs } from "~/utils/api";
import {
  edges as initialEdges,
  nodes as initialNodes,
} from "../../tests/initial-elements";
import CustomNode from "../components/CustomNode";
import "reactflow/dist/style.css";
import "../styles/overview.module.css";

// const PostCard: React.FC<{
//   post: RouterOutputs["post"]["all"][number];
//   onPostDelete?: () => void;
// }> = ({ post, onPostDelete }) => {
//   return (
//     <div className="rounded-lg flex flex-row bg-white/10 p-4 transition-all hover:scale-[101%]">
//       <div className="flex-grow">
//         <h2 className="font-bold text-2xl text-pink-400">{post.title}</h2>
//         <p className="mt-2 text-sm">{post.content}</p>
//       </div>
//       <div>
//         <span
//           className="cursor-pointer font-bold text-sm text-pink-400 uppercase"
//           onClick={onPostDelete}
//         >
//           Delete
//         </span>
//       </div>
//     </div>
//   );
// };

let id = 1;
const getId = () => `${id++}`;

const fitViewOptions = {
  padding: 3,
};

const Home: NextPage = () => {
  const postQuery = api.post.all.useQuery();

  const deletePostMutation = api.post.delete.useMutation({
    onSettled: () => postQuery.refetch(),
  });

  return (
    <>
      <ReactFlowProvider>
        <Head>
          <title>Create T3 App</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className="bg-gradient-to-b flex flex-col h-screen from-[#2e026d] to-[#15162c] text-white items-center">
          <OverviewFlow />
          <AuthShowcase />
          {postQuery.data ? (
            <div className="w-full max-w-2xl">
              {postQuery.data?.map((p) => {
                return <div>{p.title}</div>;
              })}
            </div>
          ) : (
            <p>Loading...</p>
          )}
        </main>
      </ReactFlowProvider>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: session } = api.auth.getSession.useQuery();

  const { data: secretMessage } = api.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: !!session?.user },
  );

  return (
    <div className="flex flex-col gap-4 items-center justify-center">
      {session?.user && (
        <p className="text-center text-white text-2xl">
          {session && <span>Logged in as {session?.user?.name}</span>}
          {secretMessage && <span> - {secretMessage}</span>}
        </p>
      )}
      <button
        className="rounded-full font-semibold bg-white/10 text-white py-3 px-10 transition no-underline hover:bg-white/20"
        onClick={session ? () => void signOut() : () => void signIn()}
      >
        {session ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

const nodeTypes = {
  custom: CustomNode,
};

const minimapStyle = {
  height: 120,
};

const onInit = (reactFlowInstance) =>
  console.log("flow loaded:", reactFlowInstance);

const OverviewFlow = () => {
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);
  const onConnect = useCallback(
    (params: Edge | Connection) => setEdges((eds) => addEdge(params, eds)),
    [],
  );

  const reactFlowWrapper = useRef(null);
  const connectingNodeId = useRef(null);
  const { project } = useReactFlow();

  const onConnectStart = useCallback((_, { nodeId }) => {
    connectingNodeId.current = nodeId;
  }, []);

  const onConnectEnd = useCallback(
    (event) => {
      const targetIsPane = event.target.classList.contains("react-flow__pane");

      if (targetIsPane) {
        // we need to remove the wrapper bounds, in order to get the correct position
        const { top, left } = reactFlowWrapper.current.getBoundingClientRect();
        const id = getId();
        const newNode = {
          id,
          // we are removing the half of the node width (75) to center the new node
          position: project({
            x: event.clientX - left - 75,
            y: event.clientY - top,
          }),
          data: { label: `Node ${id}` },
        };

        setNodes((nds) => nds.concat(newNode));
        setEdges((eds) =>
          eds.concat({ id, source: connectingNodeId.current, target: id }),
        );
      }
    },
    [project],
  );

  // we are using a bit of a shortcut here to adjust the edge type
  // this could also be done with a custom edge for example
  const edgesWithUpdatedTypes = edges.map((edge) => {
    if (edge.sourceHandle) {
      const edgeType = nodes.find((node) => node.type === "custom").data
        .selects[edge.sourceHandle];
      edge.type = edgeType;
    }

    return edge;
  });

  return (
    <div className="wrapper" ref={reactFlowWrapper}>
      <ReactFlow
        nodes={nodes}
        // edges={edgesWithUpdatedTypes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        onInit={onInit}
        onConnectStart={onConnectStart}
        onConnectEnd={onConnectEnd}
        fitView
        fitViewOptions={fitViewOptions}
        attributionPosition="top-right"
        nodeTypes={nodeTypes}
      >
        <MiniMap style={minimapStyle} zoomable pannable />
        <Controls />
        <Background color="#aaa" gap={16} />
      </ReactFlow>
    </div>
  );
};
